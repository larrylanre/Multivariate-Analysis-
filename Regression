###### Practicum 2 : Regis University ######

###################
# Title : Application of Multivariate analysis in Oil and Gas data with R and Spotfire
# Data Source: IHS 
# Author : Olanrewaju Salami
# MSDS692 Data Science Practicum II
###################

##############Packages#############
library(plyr)
library(neuralnet)
library(MASS)
library(stats) 
library(readr)

### Import dataset 
subp <- read_csv("C:/Users/Ayo/Desktop/Ethics/Practicum1/SubPracticumnew.csv")
setwd("C:/Users/Ayo/Desktop/Ethics/Practicum1/SubPracticumnew.csv")

##### Import and Clean dataset for analysis
subp <- SubPracticumnew
subp
#Check for missing datapoint, and fix the dataset.
apply(subp,2,function(x) sum(is.na(x)))
subp[subp=='?'] <- NA
su <- na.omit(subp) #Remove NA's
apply(su,2,function(x) sum(is.na(x)))
su

##Rank Feature By Importance using KNN
set.seed(7879)
##Prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# Train the model using knn
model <- train(TotalProppant~., data=su, method="knn", preProcess="scale", trControl=control)
#Determine variable importance
importance <- varImp(model, scale=FALSE)
#Genarate Variable importance
print(importance)
# plot importance
plot(importance)

#Randomly splitting the data into a train and a test set of 70/30, and fit a linear regression model and test it on the test set.
index <- sample(1:nrow(su),round(0.70*nrow(su)))
train <- su[index,]
test <- su[-index,]
#Apply the gml() function instead of lm() due to the nature of the dataset and the purpose of cross validation.
gm.fit <- glm(TotalProppant~Liquid+Gas,family=gaussian, data=train)
summary(gm.fit)

#Determinning the coefficient of regression
exp(coef(gm.fit))
#This output (coefficient) is interpreted as the odds of su occurring at Liquid = 0 is 1924993165639986364800686264288.00 and when Gas = 0 is 8429555.33. 
#Exponentiating the Liquid or Proppant coefficient tells us the expected increase in the odds of su for each unit of Liquid and Gas.
#When the odds ratio is 1, it indicates no change, whereas when odds ratio is 2 indicates a doubling. So, the higher the odd ratio the high the Oil affinity for the amount of proppant pumped compared to Gas 

###Computes confidence intervals for one or more parameters in a fitted model.
exp(confint.default(gm.fit))
#At 95% interval, we see Oil has a greater relationship with the amount of proppant pumped than that of Gas 

#Determinning the MSE for the fitted model
pr.gm <- predict(gm.fit,test)
MSE.gm <- sum((pr.gm - test$TotalProppant)^2)/nrow(test)
MSE.gm

###Predicting the total amount of proppant required for certain amount of Oil volume.
#We try to determine the amount of proppant required for certain amount of liquid and Gas that we expect as an output. 
#Example: If we want Oil and Gas Volume of 1000 barrel and 300 MCF, what is the required Proppant that we need to pump to achieve this amount of Oil and Gas?
newProppant <- data.frame(Liquid= 1000, Gas = 300)
predict(gm.fit,newProppant,type="response")

#Perform ANOVA on the fitted dataset
anova(gm.fit, test="Chisq")
predict <- predict(gm.fit, type = 'response')
summary(predict)

#confusion matrix
table(train$TotalProppant, predict > 0.5)

#Plot glm
library(ggplot2)
ggplot(train, aes(x=Liquid, y=TotalProppant)) + geom_point() + 
  stat_smooth(method="glm",colour='red',size = 2, se=FALSE)

ggplot(train, aes(x=Gas, y=TotalProppant)) + geom_point() + 
  stat_smooth(method="glm", se=FALSE)

#Liquid (Oil)
#Predict gives the predicted value in terms of logits
plot.dat <- data.frame(prob = su$TotalProppant/su$Liquid,
                       Liquid = su$Liquid,
                       fit = predict(gm.fit, su))

#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))

library(ggplot2)
ggplot(plot.dat, aes(x=Liquid, y=prob)) + 
  geom_point() +
  geom_line(aes(x=Liquid, y=fit_prob))

#TotalProppant
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(prob = su$Liquid/su$TotalProppant,
                       TotalProppant = su$TotalProppant,
                       fit = predict(gm.fit, su))

#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))

library(ggplot2)
ggplot(plot.dat, aes(x=TotalProppant, y=prob)) + 
  geom_point() +
  geom_line(aes(x=TotalProppant, y=fit_prob))

#From the plot, Note that the change in probabilities is constant
#This means that there is relationship between TotalProppant and the probabilities with one number.


###### NEURAL NETWORK #########
## Applying NN model to the dataset

#Preparing to fit the neural network
library(reshape)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
set.seed(62872)
subp <- SubPracticumnew
subp
apply(subp,2,function(x) sum(is.na(x)))
subp[subp=='?'] <- NA
su <- na.omit(subp)
apply(su,2,function(x) sum(is.na(x)))
su

## Creat Max and Min of dataset for scalling purpose
maxs <- apply(su, 2, max) 
mins <- apply(su, 2, min)
str(su)

## Change Data type to numeric quantity
su$TotalProppant <- as.numeric(su$TotalProppant)
su$Liquid <- as.numeric(su$Liquid)
su$Gas <- as.numeric(su$Gas)
#su$WellName <- NULL

##Scalled the data set
scaled <- as.data.frame(su, center = TRUE, scale = TRUE)
#Randomly splitting the data into a train and a test set of 70/30, and fit a linear regression model and test it on the test set.
index <- sample(1:nrow(su),round(0.70*nrow(su)))
train2 <- scaled[index,]
test2 <- scaled[-index,]
mod<-train(TotalProppant~.,method='nnet',data=train2,linout=T)
plot.nnet(mod,nid=T)





##### Predicting with NN
library(reshape)
library(car)
library(caret)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
set.seed(43445)
sa <- SubPracticumnew
sa
apply(sa,2,function(x) sum(is.na(x)))
sa[sa=='?'] <- NA
sa <- na.omit(sa)
apply(sa,2,function(x) sum(is.na(x)))
sa
trainIndex <- createDataPartition(sa$TotalProppant, p=.7, list=F)
train <- scaled[trainIndex, ]
test <- scaled[-trainIndex, ]
grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
fit <- train(TotalProppant ~ Liquid + Gas, data = scaled,
                      method = "nnet", maxit = 1000, tuneGrid = grid, trace = F, linout = 1)    
predict <- predict(fit, newdata = test)
rmse <- sqrt(mean((predict - test$TotalProppant)^2)) 
rmse
#Mean Square Error for NN
nn <- predict(fit,test)
MSE2 <- sum((nn - test$TotalProppant)^2)/nrow(test)
MSE2

#we then compare the two MSEs
print(paste(MSE.gm,MSE2))

#Predicting the total amount of proppant required for certain amount of oil volume
newProppant <- data.frame(Liquid= 5000, Gas = 300)
predict(fit,newProppant,type="raw")

par(mfrow=c(1,2))
plot(test$TotalProppant,predict,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
plot(test$TotalProppant,pr.gm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=1)

#plot nn
# The predictor vars must be scaled data for the ANN fitting
scaled <- as.data.frame(scale(sa$TotalProppant))
min <- min(sa$TotalProppant,sa$Liquid,sa$Gas)
max <- max(sa$TotalProppant,sa$Liquid,sa$Gas)
# response var must be scaled to [0 < resp < 1]
scaled$TotalProppant <- scale(sa$TotalProppant
                              , center = min
                              , scale = max - min)
scaled$Liquid <- scale(sa$Liquid
                       , center = min
                       , scale = max - min)
scaled$Gas <- scale(sa$Gas
                    , center = min
                    , scale = max - min)
mod4<-train(TotalProppant~.,method='nnet',data=scaled,linout=T)
plot.nnet(mod4,nid=T)
